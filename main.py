#1 часть 1-задание
'''def perimeter(length):
    return length * 4
length = int(input("Одна сторона: "))

perimeter(length)
print("Периметр равна: ",perimeter(length))'''

#2 задание
'''def area():
    length = int(input("Одна сторона: "))
    a = length **2
    print("Площадь равна:",a)

area()'''
#3-задание
'''def perimeter():
    a = int(input("Одна сторона: "))
    b = int(input("Вторая сторона: " ))
    c = a*b
    d = (a+b)*2
    print("Плошадь равна:",c, "Периметр равен:", d),

perimeter()'''

#4-задание Дан диаметр окружности d. Найти ее длину{{ L = π·d, π = 3.14}}
'''def diameter():
    a = int(input("Диаметер окружности: "))
    b = a * 3.14
    print("Длина равна: ", b)
diameter()'''

# 5-задание Дана длина ребра куба a. Найти объем куба V = a3 и площадь его поверхности S = 6·a2
'''def volume():
    a = int(input("Длина ребра: "))
    b = a**3
    c = 6*a**2
    print("Объем: ",b, "Площадь поверхности: ",c)

volume()'''

# 6-задание Даны длины ребер a, b, c прямоугольного параллелепипеда. Найти его объем V = a·b·c и площадь поверхности S = 2·(a·b + b·c + a·c)
'''def volume():
    a = int(input("a: "))
    b = int(input("b: "))
    c = int(input("c: "))
    d = a*b*c
    e = 2*(a*b+b*c+a*c)
    print("Объем: ",d,"Площадь: ", e)
volume()'''

# 7-задания Найти длину окружности L и площадь круга S заданного радиуса R: L = 2·π·R, S = π·R2, π=3.14
'''def length():
    a = int(input("Радиус: "))
    b = 2 * a * 3.14
    c = 3.14 * a**2
    print("Длина окружности: ",b, "Площадь: ",c)
length()'''
# 8-задание Даны два числа a и b. Найти их среднее арифметическое: (a + b)/2
'''def mean():
    a = int(input("a: "))
    b = int(input("b: "))
    c = (a+b) / 2
    print("Среднее Арифметическое значение", c )
mean()'''
# 9-задание Даны два неотрицательных числа a и b. Найти их среднее геометрическое, т. е. квадратный корень из их произведения: (a·b)1/2
'''def square():
    a = int(input("a: "))
    b = int(input("b: "))
    e = (a*b)/2
    print("Среднее Геометрическое значение: ",e)
square()
'''
# 10-Задание  Даны два ненулевых числа. Найти сумму, разность, произведение и частное их квадратов.
'''def operations():
    a = int(input("a: "))
    b = int(input("b: "))
    print("Сумма: ",a+b,"Разность: ",a-b, "Произведение: ", a*b, "Частное квадратов: ",a**2/b**2)
operations()
'''

# 2 Часть 1-задание Дано расстояние L в сантиметрах. Используя операцию деления нацело, найти количество полных метров в нем (1 метр = 100 см).
'''def converter():
    a = int(input("Введите сантиметры: "))
    b = a//100
    print(a,"Сантиметров равна ",b,"метрам")
converter()'''
# 2-задание Дана масса M в килограммах. Используя операцию деления нацело, найти количество полных тонн в ней (1 тонна = 1000 кг).
'''def converter():
    a = int(input("Введите килограммы: "))
    b = a//1000
    print(a,"Киллограммов равна ",b,"тоннам")
converter()'''

# 3-задание Дан размер файла в байтах. Используя операцию деления нацело, найти количество полных килобайтов, которые занимает данный файл (1 килобайт = 1024 байта).
'''def converter():
    a = int(input("Введите байты: "))
    b = a//1024
    print(a,"Байтов равна ",b,"килобайтам")
converter()'''
# 4-задание Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B (без наложений). Используя операцию деления нацело, найти количество отрезков B, размещенных на отрезке A.
'''def length():
    a = int(input("A: "))
    b = int(input("B: "))
    c = a //b
    print(c," отрезков B, размещенных на отрезке A.")
length()'''
# 5-задание Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B (без наложений).
# Используя операцию взятия остатка от деления нацело, найти длину незанятой части отрезка A.
'''def length():
    a = int(input("A: "))
    b = int(input("B: "))
    c = a %b
    print(c,"длину незанятой части отрезка A.")
length()'''
# 6-задание Дано двузначное число. Вывести вначале его левую цифру (десятки), а затем — его правую цифру (единицы).
# Для нахождения десятков использовать операцию деления нацело, для нахождения единиц — операцию взятия остатка от деления.
'''def number():
    a = int(input("Ведите число: " ))
    b = a // 10
    c = a % 10
    print("Левая цифра: ",b,"Правая цифра",c)
number()'''
# 7-задание Дано двузначное число. Найти сумму и произведение его цифр.
'''def number():
    a = int(input("Ведите число:"))
    b = a // 10
    c = a % 10
    print("Сумма цифр равна: ",b+c,"Произведение цирф равна: ", b*c)
number()'''
# 8-Задание Дано двузначное число. Вывести число, полученное при перестановке цифр исходного числа.
'''
def number():
    a = int(input("Ведите число:"))
    b = a // 10
    c = a % 10
    print(b+10*c)
number()'''

# 9-Задание Дано трехзначное число. Используя одну операцию деления нацело, вывести первую цифру данного числа (сотни).
'''def number():
    a = int(input("Ведите число:"))
    b = a // 100
    print(b)
number()'''

# 10-Задание Дано трехзначное число. Вывести вначале его последнюю цифру (единицы), а затем — его среднюю цифру (десятки).
'''def number():
    a = int(input("Ведите число:"))
    b = a % 10
    c = a %100 //10
    print('Единица:',b,'Десятка: ',c)
number()'''

#3 Часть 1-задание Дано целое число A. Проверить истинность высказывания: «Число A является положительным».
'''A = int(input("A: "))  # Замените на ваше значение A

result = A > 0
print(result)'''

# 2-задание  Дано целое число A. Проверить истинность высказывания: «Число A является нечетным».
'''a = int(input("A: "))
result = a % 2 == 1
print(result)'''

# 3-задание Дано целое число A. Проверить истинность высказывания: «Число A является четным».
'''a = int(input("A: "))
result = a % 2 == 0
print(result)'''

# 4-задание Даны два целых числа: A, B. Проверить истинность высказывания: «Справедливы неравенства A > 2 и B ≤ 3».
'''a = int(input("A: "))
b = int(input("B: "))
c = a > 2
d = b <= 3
print('A>2',c)
print('B≤3',d)'''

# 5-задание Даны два целых числа: A, B. Проверить истинность высказывания: «Справедливы неравенства A ≥ 0 или B < −2».
'''a = int(input("A: "))
b = int(input("B: "))
c = a >= 0
d = b < -2
print('A≥0',c)
print('B<-2',d)'''

# 6-задание Даны три целых числа: A, B, C. Проверить истинность высказывания: «Справедливо двойное неравенство A < B < _C_».
'''a = int(input('A: '))
b = int(input('B: '))
c = int(input('C: '))
d = a < b <c                
print(d)'''

# 7-задание Даны три целых числа: A, B, C. Проверить истинность высказывания: «Число B находится между числами A и _C_».
'''a = int(input('A: '))
b = int(input('B: '))
c = int(input('C: '))
d = a>b>c                       #вопрос: чем отличается 6 и 7 задание?
print(d)'''

# 8-задание Даны два целых числа: A, B. Проверить истинность высказывания: «Каждое из чисел A и B нечетное».
'''a = int(input('A: '))
b = int(input('B: '))
r = a % 2 == 1 and b%2 ==1
print(r)'''

# 9-задание Даны два целых числа: A, B. Проверить истинность высказывания: «Хотя бы одно из чисел A и B нечетное».
'''a = int(input("A: "))
b = int(input('B: '))
r = a % 2 == 1 or b%2 ==1
print(r)'''

# 10-задание Даны два целых числа: A, B. Проверить истинность высказывания: «Ровно одно из чисел A и B нечетное»
'''def check():
    a = int(input("A: "))
    b = int(input('B: '))
    c = (a%2==1 and b%2==0) or (a%2==0 and b%2==1)
    print(c)
check()'''

# 4 часть 1-задание Используя операции индексирования и среза выведите
# на экран первый и третий элементы списка [1, 2, 3 ,4 ,5], а также срез списка из первых трех элементов.
'''a = [1,2,3,4,5]
b = a[0],a[2]
print(b)
c = a[0:3]
print(c)'''

# 2-задание Дан список [«Ростов», «+», «на», «-», «Дону»].
# Исправьте плюс на дефис и выведите название города на экран использовав доступ к элементам списка по индексам
'''a = ['Ростов', '+', 'на', '-', 'Дону']
a[1] = '-'
a = ''.join(a)
print(a)'''

# 3-задание Дан список [«a», «s», «1», «a», «32», «23»]. Разбейте его на два списка: только с буквами и только с числами.
''' = ['a', 's', '1', 'a', '32','23']
numbers = []
text = []
for i in a:
    if i.isdigit():
        numbers.append(i)
    else:
        text.append(i)
print(numbers)
print(text)'''

# 4-задание В предыдущей задаче должен был получиться список из букв.
# Используя методы списков: удалите из него последний элемент, сделайте реверсию списка.
'''a = ['a', 's', '1', 'a', '32','23']
numbers = []
text = []
for i in a:
    if i.isdigit():
        numbers.append(i)
    else:
        text.append(i)

text.pop()
print(text)'''
'''# 5-задание Преобразуйте список [«a», «s», «1», «a», «32», «23»] в set и выведите на экран. Что изменилось?
a = ['a','s',1,'a',32,23]
b = set(a)
print(b)'''

#Часть 5. Словари Создайте словарь содержащий данные о человеке.
# В качестве строковых ключей используйте его имя, возраст, пол, рост, вес, размер ноги.
'''a = {"name":"Askat",
     "age":18,
     "height":176,
     "weight":60,
     "size":40}
print(a)

#Выведите на экран все данные о человеке по ключам.
print(a.keys())

a['coloreyes']='brown'
print(a)

#Удалите из словаря возраст.
del a['age']
print(a)'''

#Часть 6. Дополнительно Найдите и скопируйте алгоритм бинарного поиска. Запустите код и попробуйте разобраться как он работает
'''def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        # Если значение в середине равно целевому значению, возвращаем индекс
        if arr[mid] == target:
            return mid
        # Если значение в середине меньше целевого значения, обновляем левую границу
        elif arr[mid] < target:
            left = mid + 1
        # Если значение в середине больше целевого значения, обновляем правую границу
        else:
            right = mid - 1

    # Если элемент не найден, возвращаем -1
    return -1


# Пример использования
arr = [2, 3, 4, 10, 40]
target = 10

result = binary_search(arr, target)

if result != -1:
    print(f"Элемент {target} найден в позиции {result}.")
else:
    print(f"Элемент {target} не найден в массиве.")'''

#Найдите и скопируйте алгоритм пузырьковой сортировки. Запустите код и попробуйте разобраться как он работает
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        # Флаг, который позволяет оптимизировать сортировку
        swapped = False
        for j in range(0, n - i - 1):
            # Если текущий элемент больше следующего, меняем их местами
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True

        # Если за проход по списку не было ни одной замены, значит список отсортирован
        if not swapped:
            break


# Пример использования
arr = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(arr)
print("Отсортированный массив:", arr)
